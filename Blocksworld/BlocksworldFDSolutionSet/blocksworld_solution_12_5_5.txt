INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /home/yochan-ubuntu19/anaconda3/envs/PDDLtraceGen/bin/python3 /home/yochan-ubuntu19/Fastdownward/builds/release/bin/translate/translate.py ./blocksworld_domain.pddl ./BlocksworldProblemSet/blocksworld_problems_12_5_5.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.005s wall-clock]
530 relevant atoms
348 auxiliary atoms
878 final queue length
1479 total queue pushes
Completing instantiation... [0.010s CPU, 0.008s wall-clock]
Instantiating: [0.020s CPU, 0.015s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
13 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.004s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.010s CPU, 0.010s wall-clock]
420 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
24 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.005s wall-clock]
Reordering and filtering variables...
25 of 25 variables necessary.
13 of 25 mutex groups necessary.
288 of 288 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.003s wall-clock]
Translator variables: 25
Translator derived variables: 0
Translator facts: 182
Translator goal facts: 5
Translator mutex groups: 13
Translator total mutex groups size: 169
Translator operators: 288
Translator axioms: 0
Translator task size: 2505
Translator peak memory: 30900 KB
Writing output... [0.000s CPU, 0.002s wall-clock]
Done! [0.040s CPU, 0.040s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/yochan-ubuntu19/Fastdownward/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_rhw(reasonable_orders=true),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.4579e-05s, 9680 KB] reading input...
[t=0.00119992s, 9812 KB] done reading input!
[t=0.0020345s, 10076 KB] Initializing landmarks count heuristic...
[t=0.00209476s, 10076 KB] Initializing Exploration...
[t=0.00232327s, 10340 KB] Generating landmarks using the RPG/SAS+ approach
approx. reasonable orders
[t=0.00395866s, 10472 KB] approx. obedient reasonable orders
[t=0.00407788s, 10472 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0054388s, 10472 KB] Landmarks generation time: 0.00339417s
[t=0.00546777s, 10472 KB] Discovered 40 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.00548459s, 10472 KB] 155 edges
[t=0.0056433s, 10472 KB] Simplifying 1128 unary operators... done! [864 unary operators]
[t=0.00611321s, 10472 KB] time to simplify: 0.000510435s
[t=0.00618651s, 10472 KB] Initializing additive heuristic...
[t=0.00620757s, 10472 KB] Initializing FF heuristic...
[t=0.00626717s, 10472 KB] Building successor generator...done!
[t=0.00641197s, 10472 KB] peak memory difference for successor generator creation: 0 KB
[t=0.00642777s, 10472 KB] time for successor generation creation: 9.0643e-05s
[t=0.00644666s, 10472 KB] Variables: 25
[t=0.00646244s, 10472 KB] FactPairs: 182
[t=0.00647757s, 10472 KB] Bytes per state: 8
[t=0.00654094s, 10472 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.00658322s, 10472 KB] 21 initial landmarks, 5 goal landmarks
[t=0.00662465s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 19
[t=0.00664396s, 10472 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.00666053s, 10472 KB] g=0, 1 evaluated, 0 expanded
[t=0.00668057s, 10472 KB] Initial heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 19
[t=0.00669778s, 10472 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.00674891s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 18
[t=0.00676859s, 10472 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.00678514s, 10472 KB] g=2, 3 evaluated, 2 expanded
[t=0.00683351s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 17
[t=0.00685284s, 10472 KB] g=4, 5 evaluated, 4 expanded
[t=0.00688659s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 16
[t=0.00690576s, 10472 KB] g=5, 6 evaluated, 5 expanded
[t=0.00693934s, 10472 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.00695836s, 10472 KB] g=6, 7 evaluated, 6 expanded
[t=0.0070323s, 10472 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.00705183s, 10472 KB] g=8, 11 evaluated, 10 expanded
[t=0.00709669s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 15
[t=0.00711581s, 10472 KB] g=9, 13 evaluated, 12 expanded
[t=0.00721871s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 14
[t=0.00723846s, 10472 KB] g=11, 19 evaluated, 18 expanded
[t=0.00728732s, 10472 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.00730664s, 10472 KB] g=12, 21 evaluated, 20 expanded
[t=0.00735432s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 13
[t=0.00737347s, 10472 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.00738969s, 10472 KB] g=13, 23 evaluated, 22 expanded
[t=0.00742378s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 11
[t=0.00744251s, 10472 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.00745865s, 10472 KB] g=14, 24 evaluated, 23 expanded
[t=0.0075074s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 10
[t=0.00752659s, 10472 KB] g=15, 26 evaluated, 25 expanded
[t=0.00759902s, 10472 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.00762039s, 10472 KB] g=16, 29 evaluated, 28 expanded
[t=0.00770078s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 9
[t=0.00772048s, 10472 KB] g=17, 33 evaluated, 32 expanded
[t=0.00778881s, 10472 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.00780909s, 10472 KB] g=18, 36 evaluated, 35 expanded
[t=0.00785729s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 8
[t=0.00787641s, 10472 KB] g=19, 38 evaluated, 37 expanded
[t=0.00794121s, 10472 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.00796079s, 10472 KB] g=19, 41 evaluated, 40 expanded
[t=0.00801125s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 7
[t=0.00803052s, 10472 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0080473s, 10472 KB] g=20, 43 evaluated, 42 expanded
[t=0.00808152s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 5
[t=0.00810051s, 10472 KB] g=21, 44 evaluated, 43 expanded
[t=0.00816692s, 10472 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.00818626s, 10472 KB] g=22, 47 evaluated, 46 expanded
[t=0.00822646s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 3
[t=0.00825839s, 10472 KB] g=23, 48 evaluated, 47 expanded
[t=0.00833219s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 2
[t=0.00835282s, 10472 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.00837004s, 10472 KB] g=26, 51 evaluated, 50 expanded
[t=0.00839847s, 10472 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 1
[t=0.0084167s, 10472 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.00843212s, 10472 KB] g=27, 52 evaluated, 51 expanded
[t=0.00845797s, 10472 KB] Solution found!
[t=0.0084778s, 10472 KB] Actual search time: 0.00188994s
unstack b5 b3 (1)
put-down b5 (1)
unstack b3 b4 (1)
put-down b3 (1)
unstack b4 b6 (1)
stack b4 b3 (1)
unstack b6 b8 (1)
put-down b6 (1)
unstack b8 b11 (1)
put-down b8 (1)
unstack b11 b0 (1)
put-down b11 (1)
unstack b0 b2 (1)
put-down b0 (1)
unstack b2 b7 (1)
put-down b2 (1)
unstack b7 b9 (1)
put-down b7 (1)
unstack b9 b1 (1)
put-down b9 (1)
pick-up b8 (1)
stack b8 b9 (1)
unstack b4 b3 (1)
put-down b4 (1)
pick-up b3 (1)
stack b3 b8 (1)
pick-up b4 (1)
stack b4 b3 (1)
[t=0.00849657s, 10472 KB] Plan length: 28 step(s).
[t=0.00849657s, 10472 KB] Plan cost: 28
[t=0.00849657s, 10472 KB] Expanded 52 state(s).
[t=0.00849657s, 10472 KB] Reopened 0 state(s).
[t=0.00849657s, 10472 KB] Evaluated 53 state(s).
[t=0.00849657s, 10472 KB] Evaluations: 106
[t=0.00849657s, 10472 KB] Generated 367 state(s).
[t=0.00849657s, 10472 KB] Dead ends: 0 state(s).
[t=0.00849657s, 10472 KB] Number of registered states: 53
[t=0.00849657s, 10472 KB] Int hash set load factor: 53/64 = 0.828125
[t=0.00849657s, 10472 KB] Int hash set resizes: 6
[t=0.00849657s, 10472 KB] Search time: 0.00195611s
[t=0.00849657s, 10472 KB] Total time: 0.00849657s
Solution found.
Peak memory: 10472 KB
Remove intermediate file output.sas
search exit code: 0

