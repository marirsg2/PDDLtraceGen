INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /home/yochan-ubuntu19/anaconda3/envs/PDDLtraceGen/bin/python3 /home/yochan-ubuntu19/Fastdownward/builds/release/bin/translate/translate.py ./blocksworld_domain.pddl ./BlocksworldProblemSet/blocksworld_problems_10_8_4.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.000s CPU, 0.003s wall-clock]
382 relevant atoms
250 auxiliary atoms
632 final queue length
1054 total queue pushes
Completing instantiation... [0.000s CPU, 0.005s wall-clock]
Instantiating: [0.000s CPU, 0.011s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
11 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.004s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.010s CPU, 0.007s wall-clock]
290 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
20 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.003s wall-clock]
Reordering and filtering variables...
21 of 21 variables necessary.
11 of 21 mutex groups necessary.
200 of 200 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.002s wall-clock]
Translator variables: 21
Translator derived variables: 0
Translator facts: 132
Translator goal facts: 8
Translator mutex groups: 11
Translator total mutex groups size: 121
Translator operators: 200
Translator axioms: 0
Translator task size: 1752
Translator peak memory: 30388 KB
Writing output... [0.000s CPU, 0.002s wall-clock]
Done! [0.020s CPU, 0.031s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/yochan-ubuntu19/Fastdownward/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_rhw(reasonable_orders=true),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.5541e-05s, 9680 KB] reading input...
[t=0.00085978s, 9804 KB] done reading input!
[t=0.00169919s, 10060 KB] Initializing landmarks count heuristic...
[t=0.00175026s, 10060 KB] Initializing Exploration...
[t=0.00191306s, 10228 KB] Generating landmarks using the RPG/SAS+ approach
approx. reasonable orders
[t=0.00301772s, 10228 KB] approx. obedient reasonable orders
[t=0.00306386s, 10228 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.00417993s, 10228 KB] Landmarks generation time: 0.00247616s
[t=0.00421449s, 10228 KB] Discovered 41 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.00423188s, 10228 KB] 135 edges
[t=0.00434724s, 10228 KB] Simplifying 780 unary operators... done! [600 unary operators]
[t=0.00466492s, 10228 KB] time to simplify: 0.000351958s
[t=0.00472631s, 10228 KB] Initializing additive heuristic...
[t=0.00474659s, 10228 KB] Initializing FF heuristic...
[t=0.00480522s, 10228 KB] Building successor generator...done!
[t=0.00491643s, 10228 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0049309s, 10228 KB] time for successor generation creation: 6.0783e-05s
[t=0.00494881s, 10228 KB] Variables: 21
[t=0.00496443s, 10228 KB] FactPairs: 132
[t=0.00497978s, 10228 KB] Bytes per state: 8
[t=0.00504253s, 10228 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.00508286s, 10228 KB] 21 initial landmarks, 8 goal landmarks
[t=0.00512084s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 20
[t=0.00513962s, 10228 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.00516009s, 10228 KB] g=0, 1 evaluated, 0 expanded
[t=0.00518483s, 10228 KB] Initial heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 20
[t=0.00520291s, 10228 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.00526926s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 19
[t=0.00528963s, 10228 KB] g=2, 4 evaluated, 3 expanded
[t=0.00534741s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 18
[t=0.00536597s, 10228 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.00538186s, 10228 KB] g=4, 7 evaluated, 6 expanded
[t=0.00545128s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 17
[t=0.00546999s, 10228 KB] g=6, 11 evaluated, 10 expanded
[t=0.0055019s, 10228 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.00552038s, 10228 KB] g=6, 12 evaluated, 11 expanded
[t=0.00560287s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 16
[t=0.00562128s, 10228 KB] g=8, 17 evaluated, 16 expanded
[t=0.00571918s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 15
[t=0.00573807s, 10228 KB] g=10, 23 evaluated, 22 expanded
[t=0.00583122s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 13
[t=0.0058498s, 10228 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.00586577s, 10228 KB] g=12, 29 evaluated, 28 expanded
[t=0.00598696s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 11
[t=0.00600541s, 10228 KB] g=16, 37 evaluated, 36 expanded
[t=0.00606093s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 10
[t=0.00607899s, 10228 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.00609413s, 10228 KB] g=18, 40 evaluated, 39 expanded
[t=0.00630827s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 8
[t=0.00632824s, 10228 KB] g=26, 55 evaluated, 54 expanded
[t=0.00642496s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 7
[t=0.00644358s, 10228 KB] g=28, 61 evaluated, 60 expanded
[t=0.006545s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 5
[t=0.00656337s, 10228 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.00658222s, 10228 KB] g=30, 67 evaluated, 66 expanded
[t=0.0066543s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 4
[t=0.00667275s, 10228 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.00668912s, 10228 KB] g=32, 71 evaluated, 70 expanded
[t=0.00674798s, 10228 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.00676615s, 10228 KB] g=32, 74 evaluated, 73 expanded
[t=0.00683478s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 3
[t=0.00685314s, 10228 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.00686903s, 10228 KB] g=34, 78 evaluated, 77 expanded
[t=0.00699715s, 10228 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.00701566s, 10228 KB] g=38, 87 evaluated, 86 expanded
[t=0.0070687s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 2
[t=0.00708709s, 10228 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.00710301s, 10228 KB] g=40, 90 evaluated, 89 expanded
[t=0.00721022s, 10228 KB] New best heuristic value for lmcount(lm_factory = lm_rhw(reasonable_orders = true), transform = adapt_costs(one), pref = false): 1
[t=0.00722922s, 10228 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.00724537s, 10228 KB] g=48, 99 evaluated, 98 expanded
[t=0.00727073s, 10228 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.00728867s, 10228 KB] g=49, 100 evaluated, 99 expanded
[t=0.00731183s, 10228 KB] Solution found!
[t=0.00733102s, 10228 KB] Actual search time: 0.00224335s
unstack b2 b9 (1)
put-down b2 (1)
unstack b9 b0 (1)
put-down b9 (1)
unstack b0 b4 (1)
put-down b0 (1)
unstack b4 b3 (1)
put-down b4 (1)
pick-up b0 (1)
stack b0 b3 (1)
pick-up b2 (1)
stack b2 b0 (1)
unstack b8 b6 (1)
put-down b8 (1)
pick-up b6 (1)
stack b6 b4 (1)
pick-up b8 (1)
stack b8 b6 (1)
unstack b2 b0 (1)
put-down b2 (1)
unstack b0 b3 (1)
put-down b0 (1)
unstack b3 b7 (1)
put-down b3 (1)
unstack b7 b5 (1)
put-down b7 (1)
unstack b5 b1 (1)
put-down b5 (1)
pick-up b1 (1)
stack b1 b2 (1)
pick-up b3 (1)
stack b3 b7 (1)
pick-up b0 (1)
stack b0 b3 (1)
unstack b1 b2 (1)
put-down b1 (1)
pick-up b2 (1)
stack b2 b0 (1)
pick-up b1 (1)
stack b1 b2 (1)
unstack b8 b6 (1)
put-down b8 (1)
unstack b6 b4 (1)
put-down b6 (1)
pick-up b4 (1)
stack b4 b1 (1)
pick-up b6 (1)
stack b6 b4 (1)
pick-up b8 (1)
stack b8 b6 (1)
[t=0.00734921s, 10228 KB] Plan length: 50 step(s).
[t=0.00734921s, 10228 KB] Plan cost: 50
[t=0.00734921s, 10228 KB] Expanded 100 state(s).
[t=0.00734921s, 10228 KB] Reopened 0 state(s).
[t=0.00734921s, 10228 KB] Evaluated 101 state(s).
[t=0.00734921s, 10228 KB] Evaluations: 202
[t=0.00734921s, 10228 KB] Generated 560 state(s).
[t=0.00734921s, 10228 KB] Dead ends: 0 state(s).
[t=0.00734921s, 10228 KB] Number of registered states: 101
[t=0.00734921s, 10228 KB] Int hash set load factor: 101/128 = 0.789062
[t=0.00734921s, 10228 KB] Int hash set resizes: 7
[t=0.00734921s, 10228 KB] Search time: 0.00230724s
[t=0.00734921s, 10228 KB] Total time: 0.00734921s
Solution found.
Peak memory: 10228 KB
Remove intermediate file output.sas
search exit code: 0

